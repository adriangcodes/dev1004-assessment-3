name: CI - Production

on:
  # Trigger on push to production branch
  push:
    branches:
      - production
  
  # Trigger on pull requests to production branch
  pull_request:
    branches:
      - production
    types:
      - opened
      - synchronize
      - reopened
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

# Define environment variables
env:
  NODE_VERSION: '22'
  MONGODB_VERSION: '7.0'
  CACHE_KEY_PREFIX: 'node-deps'

# Concurrency control to cancel in-progress runs on new commits
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Core Setup using reusable workflow
  setup:
    uses: ./.github/workflows/setup.yml
    with:
      node-version: '22'
      mongodb-version: '7.0'
      install-dependencies: true
      setup-mongodb: false  # MongoDB not needed for setup phase

  # Job 2: Production-specific quality checks
  quality-checks:
    name: Quality & Security Checks
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Verify dependency installation
        run: |
          echo "Verifying installed packages..."
          npm list --depth=0
          echo "Package statistics:"
          npm ls --parseable | wc -l | xargs echo "Total packages:"

      - name: Check for security vulnerabilities
        continue-on-error: true
        run: |
          echo "Running security audit..."
          npm audit --audit-level=moderate || true

      - name: Upload dependency report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report
          path: |
            package.json
            package-lock.json
          retention-days: 7

  # Job 3: Run Tests
  test:
    name: Test Suite
    needs: [setup, quality-checks]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['20', '22']  # Test on multiple Node versions
        mongodb-version: ['6.0', '7.0']
    
    services:
      mongodb:
        image: mongo:${{ matrix.mongodb-version }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Wait for MongoDB
        run: |
          echo "Waiting for MongoDB..."
          timeout 60s bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" &>/dev/null; do sleep 2; done'
          echo "MongoDB is ready!"

      - name: Setup test environment
        env:
          MONGODB_URI: mongodb://localhost:27017/test-db
          NODE_ENV: test
          JWT_SECRET: test-secret-key
        run: |
          echo "Setting up test environment..."
          echo "MONGODB_URI=$MONGODB_URI" >> $GITHUB_ENV
          echo "NODE_ENV=$NODE_ENV" >> $GITHUB_ENV
          echo "JWT_SECRET=$JWT_SECRET" >> $GITHUB_ENV

      - name: Run database seeds
        env:
          MONGODB_URI: mongodb://localhost:27017/test-db
        run: |
          echo "Seeding test database..."
          npm run seed || echo "Seeding completed or skipped"

      - name: Run tests with coverage
        id: test-execution
        env:
          MONGODB_URI: mongodb://localhost:27017/test-db
          NODE_ENV: test
          JWT_SECRET: test-secret-key
        run: |
          echo "Running test suite..."
          npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text --coverageReporters=text-summary --json --outputFile=test-results.json --testLocationInResults --ci --maxWorkers=2 2>&1 | tee test-output.log
          
          # Capture test results
          if [ -f test-results.json ]; then
            echo "Test Summary:"
            node -e "const r=require('./test-results.json'); console.log('Tests:', r.numTotalTests, '| Passed:', r.numPassedTests, '| Failed:', r.numFailedTests)"
          fi

      - name: Generate test report
        if: always()
        run: |
          echo "Generating test report..."
          echo "## Test Results for Node ${{ matrix.node-version }} / MongoDB ${{ matrix.mongodb-version }}" > test-report.md
          echo "" >> test-report.md
          echo "### Summary" >> test-report.md
          echo '```' >> test-report.md
          if [ -f test-results.json ]; then
            node -e "
              const r=require('./test-results.json');
              console.log('Total Tests:', r.numTotalTests);
              console.log('Passed:', r.numPassedTests);
              console.log('Failed:', r.numFailedTests);
              console.log('Test Suites:', r.numTotalTestSuites);
              console.log('Duration:', (r.testResults.reduce((a,b) => a + b.perfStats.runtime, 0) / 1000).toFixed(2), 'seconds');
            "
          else
            echo "No test results found"
          fi
          echo '```' >> test-report.md

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node${{ matrix.node-version }}-mongo${{ matrix.mongodb-version }}
          path: |
            test-results.json
            test-output.log
            test-report.md
            coverage/
          retention-days: 30

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-node${{ matrix.node-version }}-mongo${{ matrix.mongodb-version }}
          path: |
            coverage/lcov.info
            coverage/coverage-final.json
          retention-days: 30

      - name: Display coverage summary
        if: always()
        run: |
          echo "Coverage Summary:"
          if [ -f coverage/lcov.info ]; then
            echo "Coverage data found"
            # Simple coverage summary from lcov
            awk '/^SF:/ {files++} /^DA:.*,0$/ {uncovered++} /^DA:/ {total++} END {if(total>0) printf "Files: %d | Lines: %d | Uncovered: %d | Coverage: %.1f%%\n", files, total, uncovered, (total-uncovered)*100/total}' coverage/lcov.info || echo "Unable to parse coverage"
          else
            echo "No coverage data available"
          fi

  # Job 4: Build and Push Docker Image (only on production branch)
  build-docker:
    name: Build & Push Docker Image
    needs: test
    if: github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: docker_creds_check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
            echo "Docker Hub credentials found"
          else
            echo "present=false" >> $GITHUB_OUTPUT
            echo "Docker Hub credentials not configured"
          fi

      - name: Log in to Docker Hub
        if: steps.docker_creds_check.outputs.present == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -t satoshifund-backend:${{ env.IMAGE_TAG }} .
          docker tag satoshifund-backend:${{ env.IMAGE_TAG }} satoshifund-backend:latest
          if [ "${{ steps.docker_creds_check.outputs.present }}" == "true" ]; then
            docker tag satoshifund-backend:${{ env.IMAGE_TAG }} ${{ env.DOCKER_USER }}/satoshifund-backend:${{ env.IMAGE_TAG }}
            docker tag satoshifund-backend:${{ env.IMAGE_TAG }} ${{ env.DOCKER_USER }}/satoshifund-backend:latest
          fi
          echo "Docker image built successfully"

      - name: Push to Docker Hub
        if: steps.docker_creds_check.outputs.present == 'true'
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ env.DOCKER_USER }}/satoshifund-backend:${{ env.IMAGE_TAG }}
          docker push ${{ env.DOCKER_USER }}/satoshifund-backend:latest
          echo "Docker image pushed successfully"

      - name: Save Docker image as artifact
        run: |
          echo "Saving Docker image as artifact..."
          docker save satoshifund-backend:${{ env.IMAGE_TAG }} | gzip > satoshifund-backend.tar.gz
          ls -lh satoshifund-backend.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: satoshifund-backend.tar.gz
          retention-days: 7

  # Job 5: Deploy to Production
  deploy:
    name: Deploy to Production
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}
      NODE_ENV: production
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      FRONTEND_URL: ${{ secrets.FRONTEND_URL }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          echo "Loading Docker image from artifact..."
          docker load < satoshifund-backend.tar.gz
          docker images | grep satoshifund-backend

      - name: Deploy with Docker Compose
        run: |
          echo "Deploying services with Docker Compose..."
          # Export environment variables for docker-compose
          export DOCKER_USER=${{ env.DOCKER_USER }}
          export IMAGE_TAG=${{ env.IMAGE_TAG }}
          export NODE_ENV=${{ env.NODE_ENV }}
          export JWT_SECRET=${{ env.JWT_SECRET }}
          export FRONTEND_URL=${{ env.FRONTEND_URL }}
          
          # Run docker-compose
          docker compose -f Docker-compose.yml up -d
          
          # Wait for services to be healthy
          echo "Waiting for services to initialize..."
          sleep 10
          
          # Verify deployment
          docker compose -f Docker-compose.yml ps
          echo "Checking service logs..."
          docker compose -f Docker-compose.yml logs --tail=50 api

      - name: Health check
        run: |
          echo "Running health check..."
          # Check if the API is responding
          for i in {1..10}; do
            if curl -f http://localhost:8080/health 2>/dev/null; then
              echo "API is healthy!"
              break
            fi
            echo "Attempt $i/10: Waiting for API..."
            sleep 3
          done
          
          # Final verification
          curl -f http://localhost:8080/health || exit 1

      - name: Deployment summary
        if: always()
        run: |
          echo "Deployment Summary:"
          echo "==================="
          echo "Image Tag: ${{ env.IMAGE_TAG }}"
          echo "Environment: ${{ env.NODE_ENV }}"
          echo "Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          echo "Status: ${{ job.status }}"

  # Job 6: Summary Report
  summary:
    name: CI/CD Pipeline Summary
    needs: [setup, quality-checks, test, build-docker, deploy]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Generate summary report
        run: |
          echo "# CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Run Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow:** ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Triggered by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Job Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Setup | ${{ needs.setup.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality-checks.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "The following artifacts have been uploaded and are available for download:" >> $GITHUB_STEP_SUMMARY
          echo "- Test results and logs" >> $GITHUB_STEP_SUMMARY
          echo "- Coverage reports" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency reports" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.build-docker.result }}" == "success" ]; then
            echo "- Docker image" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add timestamp
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "_Generated at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync(process.env.GITHUB_STEP_SUMMARY, 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });