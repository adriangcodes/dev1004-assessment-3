name: CI - Production

on:
  # Trigger on push to production branch
  push:
    branches:
      - production
  
  # Trigger on pull requests to production branch
  pull_request:
    branches:
      - production
    types:
      - opened
      - synchronize
      - reopened
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        default: false
        type: boolean

# Define environment variables
env:
  NODE_VERSION: '22'
  MONGODB_VERSION: '7.0'
  CACHE_KEY_PREFIX: 'node-deps'

jobs:
  # Job 1: Core Setup using reusable workflow
  setup:
    uses: ./.github/workflows/setup.yml
    with:
      node-version: '22'
      mongodb-version: '7.0'
      install-dependencies: true
      setup-mongodb: false  # MongoDB not needed for setup phase

  # Job 2: Run Tests
  test:
    name: Test Suite
    needs: setup
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['20', '22']  # Test on multiple Node versions
        mongodb-version: ['6.0', '7.0']
    
    services:
      mongodb:
        image: mongo:${{ matrix.mongodb-version }}
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Wait for MongoDB
        run: timeout 60s bash -c 'until mongosh --host localhost:27017 --eval "db.adminCommand(\"ping\")" &>/dev/null; do sleep 2; done'

      - name: Run database seeds
        env:
          MONGODB_URI: mongodb://localhost:27017/test-db
        run: npm run seed || true

      - name: Run tests with coverage
        id: test-execution
        env:
          MONGODB_URI: mongodb://localhost:27017/test-db
          NODE_ENV: test
          JWT_SECRET: test-secret-key
        run: |
          npm test -- --coverage --coverageReporters=json --coverageReporters=lcov --json --outputFile=test-results.json --ci --maxWorkers=2 2>&1 | tee test-output.log

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node${{ matrix.node-version }}-mongo${{ matrix.mongodb-version }}
          path: |
            test-results.json
            test-output.log
            coverage/
          retention-days: 30

      - name: Upload coverage reports
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-node${{ matrix.node-version }}-mongo${{ matrix.mongodb-version }}
          path: |
            coverage/lcov.info
            coverage/coverage-final.json
          retention-days: 30


  # Job 3: Build and Push Docker Image (only on production branch)
  build-docker:
    name: Build & Push Docker Image
    needs: test
    if: github.ref == 'refs/heads/production' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check for Docker Hub credentials
        id: docker_creds_check
        run: |
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_TOKEN }}" ]; then
            echo "present=true" >> $GITHUB_OUTPUT
          else
            echo "present=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: steps.docker_creds_check.outputs.present == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image
        run: |
          docker build -t satoshifund-backend:${{ env.IMAGE_TAG }} .
          docker tag satoshifund-backend:${{ env.IMAGE_TAG }} satoshifund-backend:latest
          if [ "${{ steps.docker_creds_check.outputs.present }}" == "true" ]; then
            docker tag satoshifund-backend:${{ env.IMAGE_TAG }} ${{ env.DOCKER_USER }}/satoshifund-backend:${{ env.IMAGE_TAG }}
            docker tag satoshifund-backend:${{ env.IMAGE_TAG }} ${{ env.DOCKER_USER }}/satoshifund-backend:latest
          fi

      - name: Push to Docker Hub
        if: steps.docker_creds_check.outputs.present == 'true'
        run: |
          docker push ${{ env.DOCKER_USER }}/satoshifund-backend:${{ env.IMAGE_TAG }}
          docker push ${{ env.DOCKER_USER }}/satoshifund-backend:latest


  # Job 4: Deploy to AWS EC2
  deploy:
    name: Deploy to AWS EC2
    needs: [test, build-docker]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      DOCKER_USER: ${{ secrets.DOCKERHUB_USERNAME }}
      IMAGE_TAG: ${{ github.sha }}
      NODE_ENV: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Check EC2 instance status
        run: |
          aws ec2 describe-instance-status \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --query 'InstanceStatuses[0].InstanceState.Name' \
            --output text

      - name: Create production docker-compose file
        run: |
          cat > docker-compose-prod.yml << 'EOF'
          name: SatoshiFund Backend Production
          
          services:
            api:
              image: ${{ env.DOCKER_USER }}/satoshifund-backend:${{ env.IMAGE_TAG }}
              container_name: satoshifund-api
              restart: unless-stopped
              depends_on:
                - mongo
              environment:
                - MONGODB_URI=mongodb://mongo:27017/satoshifunddb-production
                - NODE_ENV=production
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
                - FRONTEND_URL=${{ secrets.FRONTEND_URL }}
              ports:
                - "8080:8080"
              networks:
                - satoshifund-net
            
            mongo:
              image: mongo:latest
              container_name: satoshifund-mongo
              restart: unless-stopped
              volumes:
                - satoshifund-data:/data/db
              ports:
                - "27017:27017"
              networks:
                - satoshifund-net
          
          volumes:
            satoshifund-data:
              driver: local
          
          networks:
            satoshifund-net:
              driver: bridge
          EOF

      - name: Deploy to EC2 via SSM
        id: deploy
        run: |
          COMPOSE_CONTENT=$(cat docker-compose-prod.yml | base64 -w 0)
          
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters commands="[
              'cd /home/ubuntu',
              'echo $COMPOSE_CONTENT | base64 -d > docker-compose.yml',
              'docker-compose down --remove-orphans || true',
              'docker-compose pull',
              'docker-compose up -d',
              'sleep 10',
              'docker-compose ps'
            ]" \
            --query "Command.CommandId" \
            --output text)
          
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT
          sleep 30

      - name: Check deployment status
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.deploy.outputs.command_id }}" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "Status" \
            --output text


      - name: Remote health check
        run: |
          EC2_HOST="${{ secrets.EC2_HOST }}"
          for i in {1..15}; do
            if curl -f "http://${EC2_HOST}:8080/health" 2>/dev/null; then
              exit 0
            fi
            sleep 5
          done
          exit 1

